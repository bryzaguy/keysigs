{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["pickRandom","arr","Math","ceil","random","length","major_letters","sort","minor_letters","map","l","toLowerCase","clefs","fails","wins","levels","levelLabel","maj","min","currentLevel","gameComplete","solved","play","previous","letters","concat","letter","filter","indexOf","type","clef","giphy","search","fetch","then","a","json","data","b","images","downsized_medium","url","successImages","failImages","readyImages","LoadImages","style","height","width","position","overflow","src","BannerContent","win","failLetter","streak","failMessage","KeySignature","fail","Prize","pass","LevelStars","level","className","_","levelIndex","isCurrentLevel","isComplete","color","animation","Star","repeatAnimation","xmlns","viewBox","fill","d","key","children","split","first","second","KeySignatureButtons","onClick","Banner","backgroundColor","LevelHeader","remainingCount","fontWeight","KeySignatureImage","cssLetter","replace","href","target","rel","RobotoFont","Promise","all","success","ready","App","useState","count","setState","headerColor","lastLetter","e","textContent","losses","push","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.023cd51c.chunk.js","sourcesContent":["import \"./App.css\";\nimport { Fragment, useState } from \"react\";\n\nconst pickRandom = (arr) => arr[Math.ceil(Math.random() * arr.length) - 1];\n\n// TODO:\n//   - Ready screen with \"Play\" to start new game. Changes from \"Ready?\" to \"Go!\"\n//   - Links allow playing previous levels, underline level like link, store completed levels rather than calculate.\n//   - Save/load progress from localStorage\n//   - Giphy Splash for Ready, Success on win, timed on every Fail\n//   - High score (correct answers are 100 pts)\n//     - Streak multiplier (100 * 10)\n//     - Time multiplier which (carries over?) (halves every 3 seconds) 10x, 5x, 2x\n//   - Adjust pictures so all the key signature bars line up\n\nconst prizeLink =\n  \"https://docs.google.com/document/d/1e8bCDXDnz1Y-qnNY2vTknYMVThinHRO2Ur9eF1V1DZk/edit?usp=sharing\";\n\nconst major_letters = [\n  \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"C#\", \"F#\", \"Ab\", \"Bb\", \"Cb\", \"Db\", \"Eb\", \"Gb\",\n].sort();\n\nconst minor_letters = [\n  \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"A#\", \"C#\", \"D#\", \"F#\", \"G#\", \"Ab\", \"Bb\", \"Eb\"\n].map(l => l.toLowerCase()).sort();\n\nconst clefs = [\"treble\", \"bass\"];\nconst fails = ['Sorry', 'So close', ':(', 'Ouch', 'Whoops', 'Oopsie', 'Dang', 'Answer', 'Bummer', 'Crap']\nconst wins = ['Nice!', 'Cool!', 'Huzzah!', 'Pow!', 'Booyah!', 'Zing!', 'Cha-ching!', 'Dope!', 'Sick!']\nconst levels = ['Major', 'Minor', 'Both']\nconst levelLabel = {\n  maj: 'Major',\n  min: 'Minor'\n}\n\nvar currentLevel = 0\nvar gameComplete = false\nvar solved = []\n\nconst play = (previous) => {\n  const letters = [major_letters, minor_letters][currentLevel] || major_letters.concat(minor_letters)\n  const letter = pickRandom(letters.filter(l => solved.indexOf(l) === -1))\n  const type = major_letters.indexOf(letter) > -1 ? 'maj' : 'min'\n  const clef = pickRandom(clefs)\n\n  return { clef, type, letter, letters, previous }\n};\n\nconst giphyApiKey = '6RG4B2rBB6eP4QCDrxs7w0uZnflH6n9z'\nconst giphy = search => fetch(\n  `https://api.giphy.com/v1/gifs/search?api_key=${giphyApiKey}&q=${search}&limit=20&offset=0&rating=g&lang=en`\n).then(a => a.json()).then(a => a.data.map(b => b.images.downsized_medium.url))\n\nvar successImages = [], failImages = [], readyImages = []\nconst allPromises = Promise.all([giphy('success'), giphy('fail'), giphy('ready')])\nallPromises.then(([success, fail, ready]) => {\n  successImages = success\n  failImages = fail\n  readyImages = ready\n})\n\nfunction App() {\n  const [{ clef, type, letter, letters, previous }, setState] = useState(\n    play({count: 0})\n  )\n  const remainingCount = letters.length - solved.length\n  const headerColor = previous.win || gameComplete ? 'green' : (\n    previous.win === false ? 'red' : 'lightgrey'\n  )\n\n  const onClick = (e) => {\n    var win = e.target.textContent === letter\n    const count = previous.count + 1\n    const streak = win ? (previous.streak || 0) + 1 : 0\n    const losses = !win ? (previous.losses || 0) + 1 : 0\n    win && solved.push(letter)\n\n    if (solved.length === letters.length) {\n      solved = []\n      gameComplete = gameComplete || (currentLevel === levels.length - 1)\n      currentLevel = Math.min(currentLevel + 1, levels.length - 1)\n      setState(play({ count: 0 }))\n    } else {\n      setState(play({ count, streak, losses, win, lastLetter: letter }))\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <RobotoFont />\n      <header className=\"App-header\">\n        <Banner color={headerColor}>\n          <BannerContent letter={previous.lastLetter} streak={previous.streak} win={previous.win} />\n        </Banner>\n        <LevelStars level={currentLevel} />\n        <LevelHeader type={levelLabel[type]} remainingCount={remainingCount} />\n        <KeySignatureImage letter={letter} clef={clef} type={type} />\n        <KeySignatureButtons letters={type === 'maj' ? major_letters : minor_letters} onClick={onClick} />\n      </header>\n      <LoadImages />\n    </div>\n  );\n}\n\nfunction LoadImages () {\n  return (\n    <div style={{height: 0, width: 0, position: 'absolute', overflow: 'hidden'}}>\n      {/* eslint-disable-next-line jsx-a11y/alt-text */}\n      {successImages.concat(failImages).concat(readyImages).map(url => <img key={url} src={url} />)}\n    </div>\n  )\n}\n\nfunction BannerContent ({win, letter: failLetter, streak}) {\n  const failMessage = (\n    <KeySignature letter={failLetter}>\n      {pickRandom(fails)}...\n    </KeySignature>\n  )\n\n  const fail = failLetter ? failMessage : (gameComplete ? <Prize /> : 'READY?')\n  const pass = streak > 1 ? `${streak} POINT STREAK!`: pickRandom(wins)\n\n  return win ? pass : fail\n}\n\nfunction LevelStars ({level}) {\n  return (\n    <div className=\"LevelStars\">\n      {levels.map((_, levelIndex) => {\n        const isCurrentLevel = level === levelIndex\n        const isComplete = level > levelIndex || gameComplete\n        const color = isComplete ? 'green' : (\n          isCurrentLevel ? 'darkgrey' : 'lightgrey'\n        )\n        const animation = isComplete ? 'wow' : (\n          isCurrentLevel ? 'pulse' : ''\n        )\n\n        return (\n          <span className=\"LevelStar\">\n            Level {levelIndex + 1}: &nbsp;\n            <Star color={color} animation={animation} repeatAnimation={isCurrentLevel} />\n          </span>\n        )\n      })}\n    </div>\n  )\n}\n\nfunction Star ({color, animation, repeatAnimation}) {\n  return (\n    <svg className={`Star ${animation}`} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n      <path style={{\n        fill: color\n      }} d=\"M12 .587l3.668 7.568 8.332 1.151-6.064 5.828 1.48 8.279-7.416-3.967-7.417 3.967 1.481-8.279-6.064-5.828 8.332-1.151z\"/>\n    </svg>\n  )\n}\n\nfunction KeySignature ({letter: key, children}) {\n  const [first, second] = key.split('')\n  return (\n    <Fragment>{children}{first}<span className=\"KeyAugment\">{second || ''}</span></Fragment>\n  )\n}\n\nfunction KeySignatureButtons ({letters, onClick}) {\n  return (\n    <div className=\"Answers\">\n      {letters.map((key) => (\n        <button key={key} onClick={onClick}>\n          <KeySignature letter={key} />\n        </button>\n      ))}\n    </div>\n  )\n}\n\nfunction Banner ({color, children}) {\n  return (\n    <div className='Result' style={{ backgroundColor: color }}>\n      <div style={{position: 'relative'}}>\n        {children}\n      </div>\n    </div>\n  )\n}\n\nfunction LevelHeader ({type, remainingCount}) {\n  return (\n    <h2 style={{fontWeight: 300}}>\n      {type} ({remainingCount} left)\n    </h2>\n  )\n}\n\nfunction KeySignatureImage ({letter, clef, type}) {\n  const [first, second] = letter.split('')\n  const cssSecond = (second || '').replace(\"#\", \"s\").replace(\"b\", \"f\")\n  const cssLetter = first + cssSecond\n  const className = `${clef}-${cssLetter.toLowerCase()}-${type}`\n\n  return (\n    <div className={`App-logo ${className}`} />\n  )\n}\n\nfunction Prize () {\n  return (\n    <a href={prizeLink} target='_blank' rel=\"noreferrer\" style={{color: 'white'}}>\n      Click here for prize!\n    </a>\n  )\n}\n\nfunction RobotoFont () {\n  return (\n    <Fragment>\n      <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" /> \n      <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;900&display=swap\" rel=\"stylesheet\"/>\n      <style>{'* { font-family: Roboto }'}</style>\n    </Fragment>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}