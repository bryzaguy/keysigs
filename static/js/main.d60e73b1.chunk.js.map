{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["bonusTimer","random","range","Math","ceil","pickRandom","arr","length","major_letters","sort","minor_letters","map","l","toLowerCase","clefs","fails","wins","levels","solved","play","previous","letters","currentLevel","concat","letter","filter","indexOf","type","clef","giphy","search","fetch","then","a","json","data","b","images","fixed_height","url","height","original","frames","success","fail","ready","loaded","allPromises","Promise","all","Button","onClick","children","style","fontSize","padding","LoadImages","width","position","overflow","src","LevelStars","level","levelsCompleted","className","_","levelIndex","isCurrentLevel","isComplete","color","animation","join","isPlayable","border","borderRadius","boxShadow","opacity","Star","xmlns","viewBox","fill","d","KeySignature","key","split","first","second","KeySignatureButtons","Banner","backgroundColor","display","flexDirection","alignItems","transition","LevelHeader","score","remainingCount","fontWeight","KeySignatureImage","cssLetter","replace","Prize","href","target","rel","RobotoFont","App","useState","game","setGame","title","banner","setBanner","bonus","setBonus","JSON","parse","localStorage","getItem","stats","setStats","highScore","setTimeout","splash","useEffect","streak","clearTimeout","letterButtons","maxWidth","marginTop","margin","setItem","stringify","e","win","textContent","count","losses","push","max","lastLetter","parseInt","wait","removeItem","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d60e73b1.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/alt-text */\nimport \"./App.css\";\nimport { Fragment, useEffect, useState } from \"react\";\n\nconst random = range => Math.ceil(Math.random() * range) - 1\nconst pickRandom = arr => arr[random(arr.length)];\n\nconst prizeLink =\n  \"https://docs.google.com/document/d/1e8bCDXDnz1Y-qnNY2vTknYMVThinHRO2Ur9eF1V1DZk/edit?usp=sharing\";\n\nconst major_letters = [\n  \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"C#\", \"F#\", \"Ab\", \"Bb\", \"Cb\", \"Db\", \"Eb\", \"Gb\",\n].sort();\n\nconst minor_letters = [\n  \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"A#\", \"C#\", \"D#\", \"F#\", \"G#\", \"Ab\", \"Bb\", \"Eb\"\n].map(l => l.toLowerCase()).sort();\n\nconst clefs = [\"treble\", \"bass\"];\nconst fails = ['Sorry', 'So close', ':(', 'Ouch', 'Whoops', 'Oopsie', 'Dang', 'Answer', 'Bummer', 'Crap']\nconst wins = ['Nice!', 'Cool!', 'Huzzah!', 'Pow!', 'Booyah!', 'Zing!', 'Cha-ching!', 'Dope!', 'Sick!']\nconst levels = ['Major', 'Minor', 'Both']\n\nvar solved = []\n\nconst play = (previous) => {\n  const current_letters = [major_letters, minor_letters][previous.currentLevel]\n  const letters = current_letters || major_letters.concat(minor_letters)\n  const letter = pickRandom(letters.filter(l => solved.indexOf(l) === -1))\n  const type = major_letters.indexOf(letter) > -1 ? 'maj' : 'min'\n  const clef = pickRandom(clefs)\n\n  return { clef, type, letter, letters, previous }\n};\n\nconst giphyApiKey = '6RG4B2rBB6eP4QCDrxs7w0uZnflH6n9z'\nconst giphy = search => fetch(\n  `https://api.giphy.com/v1/gifs/search?api_key=${\n    giphyApiKey\n  }&q=${\n    search\n  }&limit=20&offset=${\n    random(1000)\n  }&rating=g&lang=en`\n).then(a => a.json()).then(a => a.data.map(b => (\n  [b.images.fixed_height.url, b.images.fixed_height.height, b.images.original.frames]\n)))\n\nvar images = {\n  success: [],\n  fail: [],\n  ready: []\n}\n\nvar loaded = false\nconst allPromises = Promise.all([giphy('success'), giphy('fail'), giphy('ready')])\nallPromises.then(([success, fail, ready]) => {\n  images = {success, fail, ready}\n})\n\nvar bonusTimer\n\nfunction App() {\n  const [game, setGame] = useState(null)\n  const [banner, setBanner] = useState({title: 'Loading...'})\n  const [bonus, setBonus] = useState(0)\n  const [stats, setStats] = useState(JSON.parse(localStorage.getItem('stats')))\n\n  var {currentLevel = 0, levelsCompleted = 0, highScore = 0} = stats || {}\n\n  if (!loaded) {\n    allPromises.then(() => {\n      setTimeout(() => {\n        loaded = true\n        setBanner({\n          title: 'Ready?',\n          splash: pickRandom(images.ready)\n        })\n      }, 500)\n    })\n  }\n\n  const { clef, type, letter, letters = [], previous = {} } = game || {}\n  const remainingCount = letters.length - solved.length\n\n  useEffect(() => {\n    if (bonus > 0) {\n      bonusTimer = setTimeout(() => {\n        setBonus(bonus - 1)\n        setBanner({\n          title: (\n            <span style={{fontSize: 'smaller'}}>\n              {((bonus - 1) * 10) + previous.streak}x Point Multiplier!\n            </span>\n          ),\n          color: 'green'\n        })\n      }, 1000)\n\n      return () => clearTimeout(bonusTimer)\n    }\n  })\n\n  const onClick = (e) => {\n    var win = e.target.textContent === letter\n    const count = previous.count + 1\n    const streak = win ? (previous.streak || 0) + 1 : 0\n    const losses = !win ? (previous.losses || 0) + 1 : 0\n    const pointsMultiplier = streak + (bonus * 10)\n    const score = (pointsMultiplier * 100) + (previous.score || 0)\n    win && solved.push(letter)\n\n    if (solved.length === letters.length) {\n      solved = []\n      if (levelsCompleted < 3 && currentLevel === levelsCompleted) {\n        currentLevel = currentLevel + 1\n        levelsCompleted = levelsCompleted + 1\n      }\n      highScore = Math.max(highScore, score)\n      const stats = {currentLevel, levelsCompleted, highScore}\n      localStorage.setItem('stats', JSON.stringify(stats))\n      setStats(stats)\n      setBanner({\n        title: levelsCompleted === 3 ? <Prize /> : pickRandom(wins),\n        splash: pickRandom(images.success),\n        color: 'green'\n      })\n      setGame(null)\n      setBonus(0)\n      clearTimeout(bonusTimer)\n      bonusTimer = null\n    } else {\n      if (win) {\n        const color = 'green'\n        if (streak > 1) {\n          clearTimeout(bonusTimer)\n          bonusTimer = null\n          setBonus(bonus + 2)\n          setBanner({\n            title: (\n              <span style={{fontSize: 'smaller'}}>\n                {streak + ((bonus + 2) * 10)}x Point Multiplier!\n              </span>\n            ),\n            color\n          })\n        } else {\n          setBanner({title: pickRandom(wins), color})\n        }\n        setGame(play({ count, streak, losses, win, score, lastLetter: letter, currentLevel }))\n      } else {\n        setBonus(0)\n        clearTimeout(bonusTimer)\n        bonusTimer = null\n\n        const fail = {\n          title: (\n            <KeySignature letter={letter}>\n              {pickRandom(fails)}...\n            </KeySignature>\n          ),\n          color: 'red'\n        }\n\n        const splash = pickRandom(images.fail)\n        setBanner({\n          splash: splash,\n          ...fail\n        })\n        const frames = parseInt(splash[2])\n        const fps = 1000 / 15\n        const latency = 1000\n        const wait = Math.max((frames * fps) + latency, 5000)\n        setTimeout(() => {\n          setBanner(fail)\n          setGame(play({ count, streak, losses, win, score, lastLetter: letter, currentLevel }))\n        }, wait)\n      }\n    }\n  };\n\n  const onPlayClick = () => {\n    setBanner({title: 'GO!'})\n    setBonus(0)\n    clearTimeout(bonusTimer)\n    bonusTimer = null\n    setGame(play({count: 0, currentLevel}))\n  }\n\n  const onResetClick = () => {\n    localStorage.removeItem('stats')\n    setStats(null)\n    setGame(null)\n    setBonus(0)\n    clearTimeout(bonusTimer)\n    bonusTimer = null\n    setBanner({title: 'Ready?', splash: pickRandom(images.ready)})\n  }\n\n  const onLevelClick = levelIndex => {\n    currentLevel = levelIndex\n    setGame(null)\n    setBonus(0)\n    clearTimeout(bonusTimer)\n    bonusTimer = null\n    const stats = {currentLevel, levelsCompleted, highScore}\n    localStorage.setItem('stats', JSON.stringify(stats))\n    setStats(stats)\n    setBanner({title: 'Ready?', splash: pickRandom(images.ready)})\n  }\n\n  const [url, height] = banner.splash || []\n  const letterButtons = type === 'maj' ? major_letters : minor_letters\n\n  return (\n    <div className=\"App\">\n      <RobotoFont />\n      <header className=\"App-header\">\n        <Banner color={banner.color} height={height && `calc(${height}px + 3.5rem)`}>\n          {banner.title}\n          {url && <img src={url} style={{maxWidth: '100%', marginTop: '0.5rem'}} />}\n        </Banner>\n        <h5 style={{color: 'grey', margin: '0.5rem 0 0'}}>High Score: {highScore}</h5>\n        <LevelStars level={currentLevel} levelsCompleted={levelsCompleted} onClick={onLevelClick} />\n        {letter && (\n          <Fragment>\n            <LevelHeader score={previous.score} remainingCount={remainingCount} />\n            <KeySignatureImage letter={letter} clef={clef} type={type} />\n            {!banner.splash && (\n              <KeySignatureButtons letters={letterButtons} onClick={onClick} />\n            )}\n          </Fragment>\n        )}\n        {game == null && <Button onClick={onPlayClick}>Play!</Button>}\n        {game == null && <button style={{marginTop: '2rem'}} onClick={onResetClick}>Reset</button>}\n      </header>\n      {loaded && <LoadImages />}\n    </div>\n  );\n}\n\nfunction Button ({onClick, children}) {\n  return (\n    <button style={{fontSize: '1.5rem', padding: '1rem'}} onClick={onClick}>{children}</button>\n  )\n}\n\nfunction LoadImages () {\n  const {success, fail, ready} = images\n  return (\n    <div style={{height: 0, width: 0, position: 'absolute', overflow: 'hidden'}}>\n      {success.concat(fail).concat(ready).map(url => <img key={url} src={url} />)}\n    </div>\n  )\n}\n\nfunction LevelStars ({level, levelsCompleted, onClick = () => {}}) {\n  return (\n    <div className=\"LevelStars\">\n      {levels.map((_, levelIndex) => {\n        const isCurrentLevel = level === levelIndex\n        const isComplete = levelIndex < levelsCompleted\n        const color = isComplete ? 'green' : (\n          isCurrentLevel ? 'darkgrey' : 'lightgrey'\n        )\n        const animation = [\n          isComplete && 'wow',\n          isCurrentLevel && 'pulse',\n        ].filter(a => a).join(' ')\n\n        const isPlayable = levelIndex <= levelsCompleted\n\n        const style = {\n          border: '1px solid #CCC',\n          padding: '0.25rem 0.5rem',\n          borderRadius: '3px',\n          boxShadow: `2px 4px 6px rgba(0,0,0,${isCurrentLevel ? '0.35' : '0.15'})`,\n          opacity: !isPlayable && 0.25\n        }\n\n        const onLevelClick = () => isPlayable && onClick(levelIndex)\n\n        return (\n          <span key={levelIndex} className=\"LevelStar\" style={style} onClick={onLevelClick}>\n            <span>Level {levelIndex + 1}:</span> &nbsp;\n            <Star color={color} animation={animation} />\n          </span>\n        )\n      })}\n    </div>\n  )\n}\n\nfunction Star ({color, animation}) {\n  return (\n    <svg className={`Star ${animation}`} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n      <path style={{\n        fill: color\n      }} d=\"M12 .587l3.668 7.568 8.332 1.151-6.064 5.828 1.48 8.279-7.416-3.967-7.417 3.967 1.481-8.279-6.064-5.828 8.332-1.151z\"/>\n    </svg>\n  )\n}\n\nfunction KeySignature ({letter: key, children}) {\n  const [first, second] = key.split('')\n  return (\n    <span>{children}{first}<span className=\"KeyAugment\">{second || ''}</span></span>\n  )\n}\n\nfunction KeySignatureButtons ({letters, onClick}) {\n  return (\n    <div className=\"Answers\">\n      {letters.map((key) => (\n        <button key={key} onClick={onClick}>\n          <KeySignature letter={key} />\n        </button>\n      ))}\n    </div>\n  )\n}\n\nfunction Banner ({color, height, children}) {\n  return (\n    <div className='Result' style={{ backgroundColor: color || 'lightgrey' }}>\n      <div style={{\n        position: 'relative',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        transition: '0.5s',\n        overflow: 'hidden',\n        height: height || '3rem'        \n      }}>\n        {children}\n      </div>\n    </div>\n  )\n}\n\nfunction LevelHeader ({score, remainingCount}) {\n  const style = {fontWeight: '900', fontSize: 'smaller'}\n  return (\n    <h2 style={{fontWeight: 300}}>\n      <span style={style}>Score: {score || 0}</span> ({remainingCount} left)\n    </h2>\n  )\n}\n\nfunction KeySignatureImage ({letter, clef, type}) {\n  const [first, second] = letter.split('')\n  const cssSecond = (second || '').replace(\"#\", \"s\").replace(\"b\", \"f\")\n  const cssLetter = first + cssSecond\n  const className = `${clef}-${cssLetter.toLowerCase()}-${type}`\n\n  return (\n    <div className=\"KeySigImageContainer\"><div className={`KeySigImage ${className}`} /></div>\n  )\n}\n\nfunction Prize () {\n  return (\n    <a href={prizeLink} target='_blank' rel=\"noreferrer\" style={{color: 'white'}}>\n      Click here for prize!\n    </a>\n  )\n}\n\nfunction RobotoFont () {\n  return (\n    <Fragment>\n      <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" /> \n      <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;900&display=swap\" rel=\"stylesheet\"/>\n      <style>{'* { font-family: Roboto }'}</style>\n    </Fragment>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}