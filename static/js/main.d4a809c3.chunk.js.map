{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["pickRandom","arr","Math","ceil","random","length","major_letters","sort","minor_letters","map","l","toLowerCase","clefs","fails","wins","levels","levelLabel","maj","min","currentLevel","gameComplete","solved","play","previous","letters","concat","letter","filter","indexOf","type","clef","LevelStars","level","className","_","levelIndex","isCurrentLevel","isComplete","color","animation","Star","repeatAnimation","xmlns","width","height","viewBox","style","fill","d","KeySignature","key","children","split","first","second","KeySignatureButtons","onClick","Banner","background","position","LevelHeader","remainingCount","fontWeight","KeySignatureImage","cssLetter","replace","Prize","href","target","rel","RobotoFont","App","useState","count","setState","headerColor","win","bannerContent","streak","lastLetter","e","textContent","losses","push","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4a809c3.chunk.js","sourcesContent":["import \"./App.css\";\nimport { Fragment, useState } from \"react\";\n\nconst pickRandom = (arr) => arr[Math.ceil(Math.random() * arr.length) - 1];\n\n// Streak score\n// Time multiplier\n\nconst prizeLink =\n  \"https://docs.google.com/document/d/1e8bCDXDnz1Y-qnNY2vTknYMVThinHRO2Ur9eF1V1DZk/edit?usp=sharing\";\n\nconst major_letters = [\n  \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"C#\", \"F#\", \"Ab\", \"Bb\", \"Cb\", \"Db\", \"Eb\", \"Gb\",\n].sort();\n\nconst minor_letters = [\n  \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"A#\", \"C#\", \"D#\", \"F#\", \"G#\", \"Ab\", \"Bb\", \"Eb\"\n].map(l => l.toLowerCase()).sort();\n\nconst clefs = [\"treble\", \"bass\"];\nconst fails = ['Sorry', 'So close', ':(', 'Ouch', 'Whoops', 'Oopsie', 'Dang', 'Answer', 'Bummer', 'Crap']\nconst wins = ['Nice!', 'Cool!', 'Huzzah!', 'Pow!', 'Booyah!', 'Zing!', 'Cha-ching!', 'Dope!', 'Sick!']\nconst levels = ['Major', 'Minor', 'Both']\nconst levelLabel = {\n  maj: 'Major',\n  min: 'Minor'\n}\n\nvar currentLevel = 0\nvar gameComplete = false\nvar solved = []\n\nconst play = (previous) => {\n  const letters = [major_letters, minor_letters][currentLevel] || major_letters.concat(minor_letters)\n  const letter = pickRandom(letters.filter(l => solved.indexOf(l) === -1))\n  const type = major_letters.indexOf(letter) > -1 ? 'maj' : 'min'\n  const clef = pickRandom(clefs)\n\n  return { clef, type, letter, letters, previous }\n};\n\nfunction App() {\n  const [{ clef, type, letter, letters, previous }, setState] = useState(\n    play({count: 0})\n  )\n  const remainingCount = letters.length - solved.length\n  const headerColor = previous.win || gameComplete ? 'green' : (\n    previous.win === false ? 'red' : 'lightgrey'\n  )\n\n  const bannerContent = previous.win ? (\n    previous.streak > 1 ? `${previous.streak} POINT STREAK!`: pickRandom(wins)\n  ) : (gameComplete ? (\n      <Prize />\n    ) : (previous.lastLetter ? \n      <KeySignature letter={previous.lastLetter}>\n        {pickRandom(fails)}...\n      </KeySignature> : 'READY?'))\n\n  const onClick = (e) => {\n    var win = e.target.textContent === letter\n    const count = previous.count + 1\n    const streak = win ? (previous.streak || 0) + 1 : 0\n    const losses = !win ? (previous.losses || 0) + 1 : 0\n    win && solved.push(letter)\n\n    if (solved.length === letters.length) {\n      solved = []\n      gameComplete = gameComplete || (currentLevel === levels.length - 1)\n      currentLevel = Math.min(currentLevel + 1, levels.length - 1)\n      setState(play({ count: 0 }))\n    } else {\n      setState(play({ count, streak, losses, win, lastLetter: letter }))\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <RobotoFont />\n      <header className=\"App-header\">\n        <Banner color={headerColor} previous={previous}>{bannerContent}</Banner>\n        <LevelStars level={currentLevel} />\n        <LevelHeader type={levelLabel[type]} remainingCount={remainingCount} />\n        <KeySignatureImage letter={letter} clef={clef} type={type} />\n        <KeySignatureButtons letters={type === 'maj' ? major_letters : minor_letters} onClick={onClick} />\n      </header>\n    </div>\n  );\n}\n\nfunction LevelStars ({level}) {\n  return (\n    <div className=\"LevelStars\">\n      {levels.map((_, levelIndex) => {\n        const isCurrentLevel = level === levelIndex\n        const isComplete = level > levelIndex\n        const color = isCurrentLevel ? 'darkgrey' : (\n          isComplete ? 'green' : 'lightgrey'\n        )\n        const animation = isCurrentLevel && !gameComplete ? 'pulse' : (\n          isComplete ? 'wow' : ''\n        )\n\n        return (\n          <span className=\"LevelStar\">\n            Level {levelIndex + 1}: &nbsp;\n            <Star color={color} animation={animation} repeatAnimation={isCurrentLevel} />\n          </span>\n        )\n      })}\n    </div>\n  )\n}\n\nfunction Star ({color, animation, repeatAnimation}) {\n  return (\n    <svg className={`Star ${animation}`} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n      <path style={{\n        fill: color\n      }} d=\"M12 .587l3.668 7.568 8.332 1.151-6.064 5.828 1.48 8.279-7.416-3.967-7.417 3.967 1.481-8.279-6.064-5.828 8.332-1.151z\"/>\n    </svg>\n  )\n}\n\nfunction KeySignature ({letter: key, children}) {\n  const [first, second] = key.split('')\n  return (\n    <Fragment>{children}{first}<span className=\"KeyAugment\">{second || ''}</span></Fragment>\n  )\n}\n\nfunction KeySignatureButtons ({letters, onClick}) {\n  return (\n    <div className=\"Answers\">\n      {letters.map((key) => (\n        <button key={key} onClick={onClick}>\n          <KeySignature letter={key} />\n        </button>\n      ))}\n    </div>\n  )\n}\n\nfunction Banner ({color, children}) {\n  return (\n    <div className='Result' style={{ background: color }}>\n      <div style={{position: 'relative'}}>\n        {children}\n      </div>\n    </div>\n  )\n}\n\nfunction LevelHeader ({type, remainingCount}) {\n  return (\n    <h2 style={{fontWeight: 300}}>\n      {type} ({remainingCount} left)\n    </h2>\n  )\n}\n\nfunction KeySignatureImage ({letter, clef, type}) {\n  const [first, second] = letter.split('')\n  const cssSecond = (second || '').replace(\"#\", \"s\").replace(\"b\", \"f\")\n  const cssLetter = first + cssSecond\n  const className = `${clef}-${cssLetter.toLowerCase()}-${type}`\n\n  return (\n    <div className={`App-logo ${className}`} />\n  )\n}\n\nfunction Prize () {\n  return (\n    <a href={prizeLink} target='_blank' rel=\"noreferrer\" style={{color: 'white'}}>\n      Click here for prize!\n    </a>\n  )\n}\n\nfunction RobotoFont () {\n  return (\n    <Fragment>\n      <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" /> \n      <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;900&display=swap\" rel=\"stylesheet\"/>\n      <style>{'* { font-family: Roboto }'}</style>\n    </Fragment>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}