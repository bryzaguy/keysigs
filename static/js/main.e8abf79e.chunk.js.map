{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["random","range","Math","ceil","pickRandom","arr","length","major_letters","sort","minor_letters","map","l","toLowerCase","clefs","fails","wins","levels","levelLabel","maj","min","JSON","parse","localStorage","getItem","currentLevel","levelsCompleted","solved","play","previous","letters","concat","letter","filter","indexOf","type","clef","giphy","search","fetch","then","a","json","data","b","images","fixed_height","url","height","original","frames","success","fail","ready","loaded","allPromises","Promise","all","PlayButton","onClick","style","fontSize","padding","LoadImages","width","position","overflow","src","LevelStars","level","className","_","levelIndex","isCurrentLevel","isComplete","color","animation","join","isPlayable","border","borderRadius","boxShadow","opacity","Star","xmlns","viewBox","fill","d","KeySignature","key","children","split","first","second","KeySignatureButtons","Banner","backgroundColor","display","flexDirection","alignItems","transition","LevelHeader","remainingCount","fontWeight","KeySignatureImage","cssLetter","replace","Prize","href","target","rel","RobotoFont","App","useState","game","setGame","title","banner","setBanner","setTimeout","splash","letterButtons","maxWidth","marginTop","e","win","textContent","count","streak","losses","push","setItem","stringify","lastLetter","parseInt","wait","max","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e8abf79e.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/alt-text */\nimport \"./App.css\";\nimport { Fragment, useState } from \"react\";\n\nconst random = range => Math.ceil(Math.random() * range) - 1\nconst pickRandom = arr => arr[random(arr.length)];\n\n// TODO:\n//   - High score (correct answers are 100 pts)\n//     - Streak multiplier (100 * 10)\n//     - Time multiplier which (carries over?) (halves every 3 seconds) 10x, 5x, 2x\n//   - Adjust pictures so all the key signature bars line up\n\nconst prizeLink =\n  \"https://docs.google.com/document/d/1e8bCDXDnz1Y-qnNY2vTknYMVThinHRO2Ur9eF1V1DZk/edit?usp=sharing\";\n\nconst major_letters = [\n  \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"C#\", \"F#\", \"Ab\", \"Bb\", \"Cb\", \"Db\", \"Eb\", \"Gb\",\n].sort();\n\nconst minor_letters = [\n  \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"A#\", \"C#\", \"D#\", \"F#\", \"G#\", \"Ab\", \"Bb\", \"Eb\"\n].map(l => l.toLowerCase()).sort();\n\nconst clefs = [\"treble\", \"bass\"];\nconst fails = ['Sorry', 'So close', ':(', 'Ouch', 'Whoops', 'Oopsie', 'Dang', 'Answer', 'Bummer', 'Crap']\nconst wins = ['Nice!', 'Cool!', 'Huzzah!', 'Pow!', 'Booyah!', 'Zing!', 'Cha-ching!', 'Dope!', 'Sick!']\nconst levels = ['Major', 'Minor', 'Both']\nconst levelLabel = {\n  maj: 'Major',\n  min: 'Minor'\n}\n\nvar {currentLevel, levelsCompleted} = JSON.parse(\n  localStorage.getItem('stats')\n) || {currentLevel: 0, levelsCompleted: 0}\n\nvar solved = []\n\nconst play = (previous) => {\n  const letters = [major_letters, minor_letters][currentLevel] || major_letters.concat(minor_letters)\n  const letter = pickRandom(letters.filter(l => solved.indexOf(l) === -1))\n  const type = major_letters.indexOf(letter) > -1 ? 'maj' : 'min'\n  const clef = pickRandom(clefs)\n\n  return { clef, type, letter, letters, previous }\n};\n\nconst giphyApiKey = '6RG4B2rBB6eP4QCDrxs7w0uZnflH6n9z'\nconst giphy = search => fetch(\n  `https://api.giphy.com/v1/gifs/search?api_key=${\n    giphyApiKey\n  }&q=${\n    search\n  }&limit=20&offset=${\n    random(1000)\n  }&rating=g&lang=en`\n).then(a => a.json()).then(a => a.data.map(b => (\n  [b.images.fixed_height.url, b.images.fixed_height.height, b.images.original.frames]\n)))\n\nvar images = {\n  success: [],\n  fail: [],\n  ready: []\n}\n\nvar loaded = false\nconst allPromises = Promise.all([giphy('success'), giphy('fail'), giphy('ready')])\nallPromises.then(([success, fail, ready]) => {\n  images = {success, fail, ready}\n})\n\nfunction App() {\n  const [game, setGame] = useState(null)\n  const [banner, setBanner] = useState({title: 'Loading...'})\n\n  if (!loaded) {\n    allPromises.then(() => {\n      setTimeout(() => {\n        loaded = true\n        setBanner({\n          title: 'Ready?',\n          splash: pickRandom(images.ready)\n        })\n      }, 500)\n    })\n  }\n\n  const { clef, type, letter, letters = [], previous = {} } = game || {}\n  const remainingCount = letters.length - solved.length\n\n  const onClick = (e) => {\n    var win = e.target.textContent === letter\n    const count = previous.count + 1\n    const streak = win ? (previous.streak || 0) + 1 : 0\n    const losses = !win ? (previous.losses || 0) + 1 : 0\n    win && solved.push(letter)\n\n    if (solved.length === letters.length) {\n      solved = []\n      levelsCompleted = Math.min(levelsCompleted + 1, 3)\n      currentLevel = Math.min(currentLevel + 1, levels.length - 1)\n      localStorage.setItem('stats', JSON.stringify({currentLevel, levelsCompleted}))\n      setBanner({\n        title: levelsCompleted === 3 ? <Prize /> : pickRandom(wins),\n        splash: pickRandom(images.success),\n        color: 'green'\n      })\n      setGame(null)\n    } else {\n      if (win) {\n        const color = 'green'\n        if (streak > 1) {\n          setBanner({\n            title: (\n              <span style={{fontSize: 'smaller'}}>\n                {streak} POINT STREAK!\n              </span>\n            ),\n            color\n          })\n        } else {\n          setBanner({title: pickRandom(wins), color})\n        }\n        setGame(play({ count, streak, losses, win, lastLetter: letter }))\n      } else {\n        const fail = {\n          title: (\n            <KeySignature letter={letter}>\n              {pickRandom(fails)}...\n            </KeySignature>\n          ),\n          color: 'red'\n        }\n\n        const splash = pickRandom(images.fail)\n        setBanner({\n          splash: splash,\n          ...fail\n        })\n        const frames = parseInt(splash[2])\n        const fps = 1000 / 15\n        const latency = 1000\n        const wait = Math.max((frames * fps) + latency, 5000)\n        setTimeout(() => {\n          setBanner(fail)\n          setGame(play({ count, streak, losses, win, lastLetter: letter }))\n        }, wait)\n      }\n    }\n  };\n\n  const onPlayClick = () => {\n    setBanner({title: 'GO!'})\n    setGame(play({count: 0}))\n  }\n\n  const onLevelClick = levelIndex => {\n    currentLevel = levelIndex\n    setGame(null)\n    setBanner({title: 'Ready?', splash: pickRandom(images.ready)})\n  }\n\n  const [url, height] = banner.splash || []\n  const letterButtons = type === 'maj' ? major_letters : minor_letters\n\n  return (\n    <div className=\"App\">\n      <RobotoFont />\n      <header className=\"App-header\">\n        <Banner color={banner.color} height={height && `calc(${height}px + 3.5rem)`}>\n          {banner.title}\n          {url && <img src={url} style={{maxWidth: '100%', marginTop: '0.5rem'}} />}\n        </Banner>\n        <LevelStars level={currentLevel} onClick={onLevelClick} />\n        {letter && (\n          <Fragment>\n            <LevelHeader type={levelLabel[type]} remainingCount={remainingCount} />\n            <KeySignatureImage letter={letter} clef={clef} type={type} />\n            {!banner.splash && (\n              <KeySignatureButtons letters={letterButtons} onClick={onClick} />\n            )}\n          </Fragment>\n        )}\n        {game == null && <PlayButton onClick={onPlayClick} />}\n      </header>\n      {loaded && <LoadImages />}\n    </div>\n  );\n}\n\nfunction PlayButton ({onClick}) {\n  return (\n    <button style={{fontSize: '1.5rem', padding: '1rem'}} onClick={onClick}>Play!</button>\n  )\n}\n\nfunction LoadImages () {\n  const {success, fail, ready} = images\n  return (\n    <div style={{height: 0, width: 0, position: 'absolute', overflow: 'hidden'}}>\n      {success.concat(fail).concat(ready).map(url => <img key={url} src={url} />)}\n    </div>\n  )\n}\n\nfunction LevelStars ({level, onClick = () => {}}) {\n  return (\n    <div className=\"LevelStars\">\n      {levels.map((_, levelIndex) => {\n        const isCurrentLevel = level === levelIndex\n        const isComplete = levelIndex < levelsCompleted\n        const color = isComplete ? 'green' : (\n          isCurrentLevel ? 'darkgrey' : 'lightgrey'\n        )\n        const animation = [\n          isComplete && 'wow',\n          isCurrentLevel && 'pulse',\n        ].filter(a => a).join(' ')\n\n        const isPlayable = levelIndex <= levelsCompleted\n\n        const style = {\n          border: '1px solid #CCC',\n          padding: '0.25rem 0.5rem',\n          borderRadius: '3px',\n          boxShadow: `2px 4px 6px rgba(0,0,0,${isCurrentLevel ? '0.35' : '0.15'})`,\n          opacity: !isPlayable && 0.25\n        }\n\n        const onLevelClick = () => isPlayable && onClick(levelIndex)\n\n        return (\n          <span key={levelIndex} className=\"LevelStar\" style={style} onClick={onLevelClick}>\n            <span>Level {levelIndex + 1}:</span> &nbsp;\n            <Star color={color} animation={animation} />\n          </span>\n        )\n      })}\n    </div>\n  )\n}\n\nfunction Star ({color, animation}) {\n  return (\n    <svg className={`Star ${animation}`} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n      <path style={{\n        fill: color\n      }} d=\"M12 .587l3.668 7.568 8.332 1.151-6.064 5.828 1.48 8.279-7.416-3.967-7.417 3.967 1.481-8.279-6.064-5.828 8.332-1.151z\"/>\n    </svg>\n  )\n}\n\nfunction KeySignature ({letter: key, children}) {\n  const [first, second] = key.split('')\n  return (\n    <span>{children}{first}<span className=\"KeyAugment\">{second || ''}</span></span>\n  )\n}\n\nfunction KeySignatureButtons ({letters, onClick}) {\n  return (\n    <div className=\"Answers\">\n      {letters.map((key) => (\n        <button key={key} onClick={onClick}>\n          <KeySignature letter={key} />\n        </button>\n      ))}\n    </div>\n  )\n}\n\nfunction Banner ({color, height, children}) {\n  return (\n    <div className='Result' style={{ backgroundColor: color || 'lightgrey' }}>\n      <div style={{\n        position: 'relative',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        transition: '0.5s',\n        overflow: 'hidden',\n        height: height || '3rem'        \n      }}>\n        {children}\n      </div>\n    </div>\n  )\n}\n\nfunction LevelHeader ({type, remainingCount}) {\n  return (\n    <h2 style={{fontWeight: 300}}>\n      {type} ({remainingCount} left)\n    </h2>\n  )\n}\n\nfunction KeySignatureImage ({letter, clef, type}) {\n  const [first, second] = letter.split('')\n  const cssSecond = (second || '').replace(\"#\", \"s\").replace(\"b\", \"f\")\n  const cssLetter = first + cssSecond\n  const className = `${clef}-${cssLetter.toLowerCase()}-${type}`\n\n  return (\n    <div className={`App-logo ${className}`} />\n  )\n}\n\nfunction Prize () {\n  return (\n    <a href={prizeLink} target='_blank' rel=\"noreferrer\" style={{color: 'white'}}>\n      Click here for prize!\n    </a>\n  )\n}\n\nfunction RobotoFont () {\n  return (\n    <Fragment>\n      <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" /> \n      <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;900&display=swap\" rel=\"stylesheet\"/>\n      <style>{'* { font-family: Roboto }'}</style>\n    </Fragment>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}