{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["pickRandom","arr","Math","ceil","random","length","prizeLink","major_letters","sort","minor_letters","types","clefs","newGame","lastResult","type","letters","letter","clef","App","useState","setState","cssLetter","replace","toLowerCase","className","onClick","e","game","target","textContent","undefined","style","color","map","key","href","display","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMAGMA,EAAa,SAACC,GAAD,OAASA,EAAIC,KAAKC,KAAKD,KAAKE,SAAWH,EAAII,QAAU,IAElEC,EACJ,mGAEIC,EAAgB,CACpB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACAC,OAEIC,EAAgB,CACpB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACAD,OAEIE,EAAQ,CAAC,MAAO,OAChBC,EAAQ,CAAC,SAAU,QAEnBC,EAAU,SAACC,GACf,IAAMC,EAAOd,EAAWU,GAClBK,EAAmB,QAATD,EAAiBP,EAAgBE,EAC3CO,EAAShB,EAAWe,GAG1B,MAAO,CAAEE,KAFIjB,EAAWW,GAETG,OAAME,SAAQD,UAASF,eAsCzBK,MAnCf,WACE,MAAgEC,mBAC9DP,KADF,0BAASK,EAAT,EAASA,KAAMH,EAAf,EAAeA,KAAME,EAArB,EAAqBA,OAAQD,EAA7B,EAA6BA,QAASF,EAAtC,EAAsCA,WAAcO,EAApD,KAIMC,EAAYL,EAAOM,QAAQ,IAAK,KAAKA,QAAQ,IAAK,KAAKC,cACvDC,EAAS,UAAMP,EAAN,YAAcI,EAAd,YAA2BP,GAEpCW,EAAU,SAACC,GACf,IAAMC,EAAOf,EAAQc,EAAEE,OAAOC,cAAgBb,GAC9CI,EAASO,IAGX,OACE,sBAAKH,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,eACkBM,IAAfjB,GACC,qBAAKW,UAAU,SAASO,MAAO,CAACC,MAAOnB,EAAa,QAAU,OAA9D,SACGA,EAAa,UAAY,WAG9B,qBAAKW,UAAS,mBAAcA,KAC5B,qBAAKA,UAAU,UAAf,SACGT,EAAQkB,KAAI,SAACC,GAAD,OACX,wBAAkBT,QAASA,EAA3B,SAAqCS,GAAxBA,WAInB,mBAAGC,KAAM7B,EAAWyB,MAAO,CAAEK,QAAS,UAAtC,SACG9B,QC3EM+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.33ac2748.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useState } from \"react\";\n\nconst pickRandom = (arr) => arr[Math.ceil(Math.random() * arr.length) - 1];\n\nconst prizeLink =\n  \"https://docs.google.com/document/d/1e8bCDXDnz1Y-qnNY2vTknYMVThinHRO2Ur9eF1V1DZk/edit?usp=sharing\";\n\nconst major_letters = [\n  \"A\",\n  \"B\",\n  \"C\",\n  \"D\",\n  \"E\",\n  \"F\",\n  \"G\",\n  \"C#\",\n  \"F#\",\n  \"Ab\",\n  \"Bb\",\n  \"Cb\",\n  \"Db\",\n  \"Eb\",\n  \"Gb\",\n].sort();\n\nconst minor_letters = [\n  \"A\",\n  \"B\",\n  \"C\",\n  \"D\",\n  \"E\",\n  \"F\",\n  \"G\",\n  \"A#\",\n  \"C#\",\n  \"D#\",\n  \"G#\",\n  \"Ab\",\n  \"Bb\",\n  \"Cb\",\n  \"Db\",\n  \"Eb\",\n  \"Gb\",\n].sort();\n\nconst types = [\"maj\", \"min\"];\nconst clefs = [\"treble\", \"bass\"];\n\nconst newGame = (lastResult) => {\n  const type = pickRandom(types);\n  const letters = type === \"maj\" ? major_letters : minor_letters;\n  const letter = pickRandom(letters);\n  const clef = pickRandom(clefs);\n\n  return { clef, type, letter, letters, lastResult };\n};\n\nfunction App() {\n  const [{ clef, type, letter, letters, lastResult }, setState] = useState(\n    newGame()\n  );\n\n  const cssLetter = letter.replace(\"#\", \"s\").replace(\"b\", \"f\").toLowerCase();\n  const className = `${clef}-${cssLetter}-${type}`;\n\n  const onClick = (e) => {\n    const game = newGame(e.target.textContent === letter)\n    setState(game)\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {lastResult !== undefined && (\n          <div className='Result' style={{color: lastResult ? 'green' : 'red'}}>\n            {lastResult ? 'GOT IT!' : 'BUMMER'}\n          </div>\n        )}\n        <div className={`App-logo ${className}`} />\n        <div className=\"Answers\">\n          {letters.map((key) => (\n            <button key={key} onClick={onClick}>{key}</button>\n          ))}\n        </div>\n      </header>\n      <a href={prizeLink} style={{ display: \"hidden\" }}>\n        {prizeLink}\n      </a>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}